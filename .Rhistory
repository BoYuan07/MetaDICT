View(feat.rel.red)
### low abundance filter
f.idx = rowSums(temp.max.ab >= 1e-03) >= 3 &
row.names(feat.rel.crc) != '-1'
feat.rel.red = feat.rel.crc[f.idx,]
feat.rel.crc = tss(count)
temp.max.ab = t(sapply(row.names(feat.rel.crc),
FUN=function(marker){sapply(unique(meta.crc$Study),
FUN=function(study, marker){
max.ab = max(feat.rel.crc[marker, which(meta.crc$Study == study)])
},
marker=marker)}))
load("../data/Rawdata_Wirbel/motus_taxonomy_2.5.1.Rdata")
# counts
count <- read.table("../data/Rawdata_Wirbel/species_profiles_g2_l75_motus2.0.0.tsv",
sep='\t',stringsAsFactors = FALSE,
header = TRUE, check.names = FALSE, row.names = 1,
quote='')
meta <- readr::read_tsv("../data/Rawdata_Wirbel/meta_all.tsv")
include_study <- c("FR-CRC","DE-CRC","CN-CRC","US-CRC","AT-CRC" )
meta <- meta %>%
filter(Study %in% include_study) %>%
filter(Group %in% c('CTR', 'CRC'))
meta$Group[meta$Group == "CTR"] <- "Control"
all_taxonomy <- motus2.5_taxonomy
count <- count[,meta$Sample_ID]
#load(url("https://github.com/AlessioMilanese/motus_taxonomy/blob/master/data/motus_taxonomy_2.5.1.Rdata?raw=true"))
# adjust taxonomy format
taxonomy <- str_split_fixed(rownames(count)," ",3)
taxonomy <- as.data.frame(taxonomy)
colnames(taxonomy) <- c("Genus","Species","OTU")
taxonomy$taxa <- rownames(count)
taxonomy$Species[str_detect(taxonomy$taxa,"alpha proteobacterium")] <- str_split_fixed(taxonomy$taxa[str_detect(taxonomy$taxa,"alpha proteobacterium")],"\\[",2)[,1]
select_taxa <- which(str_detect(taxonomy$taxa,"alpha proteobacterium")==T)
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
taxonomy$Genus[i] <- all_taxonomy$Genus[str_detect(all_taxonomy$Species,taxonomy$Species[i])][1]
}
taxonomy$Species[str_detect(taxonomy$taxa,"butyrate-producing")] <- str_split_fixed(taxonomy$taxa[str_detect(taxonomy$taxa,"butyrate-producing")],"\\[",2)[,1]
select_taxa <- which(str_detect(taxonomy$taxa,"butyrate-producing")==T)
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
taxonomy$Genus[i] <- all_taxonomy$Genus[str_detect(all_taxonomy$Species,taxonomy$Species[i])][1]
}
taxonomy$Species[str_detect(taxonomy$taxa,"uncultured")] <- str_split_fixed(taxonomy$taxa[str_detect(taxonomy$taxa,"uncultured")],"\\[",2)[,1]
select_taxa <- which(str_detect(taxonomy$taxa,"uncultured")==T)
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
if(taxonomy$Species[i]=="uncultured candidatus Thalassoarchaea euryarchaeot"){
taxonomy$Genus[i] <- "Euryarchaeota gen. incertae sedis"
}else{
taxonomy$Genus[i] <- all_taxonomy$Genus[str_detect(all_taxonomy$Species,taxonomy$Species[i])][1]
}
}
taxonomy$Genus[which(taxonomy$Genus=="unknown")] <- taxonomy$Species[which(taxonomy$Genus=="unknown")]
select_taxa <- which(taxonomy$Genus=="candidatus")
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
if(str_detect(taxonomy$taxa[i],"unknown")){
taxonomy$Species[i] <- str_split_fixed(taxonomy$taxa[i],"\\[",2)[1]
taxonomy$Genus[i] <- gsub("unknown", "", taxonomy$Species[i])
}else{
taxonomy$Genus[i] <- paste(taxonomy$Genus[i],taxonomy$Species[i])
}
taxonomy$Genus[i] <- gsub("candidatus", "Candidatus", taxonomy$Species[i])
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "left")
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "right")
}
taxonomy$Genus <- gsub("unknown ","",taxonomy$Genus)
select_taxa <- which(taxonomy$Genus=="cand.")
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
if(str_detect(taxonomy$taxa[i],"unknown")){
taxonomy$Species[i] <- str_split_fixed(taxonomy$taxa[i],"\\[",2)[1]
taxonomy$Genus[i] <- gsub("unknown", "", taxonomy$Species[i])
}else{
taxonomy$Genus[i] <- paste(taxonomy$Genus[i],taxonomy$Species[i])
}
taxonomy$Genus[i] <- gsub("candidatus", "Candidatus", taxonomy$Species[i])
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "left")
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "right")
}
taxonomy$Genus[which(taxonomy$Genus=="1730 Eubacterium")] <- "Eubacterium"
taxonomy$Genus[which(taxonomy$Genus=="1485 Clostridium")] <- "Clostridium"
taxonomy$Genus[which(taxonomy$Genus=="41275 Brevundimonas")] <- "Brevundimonas"
taxonomy$Genus[which(taxonomy$Genus=="Candidatus Saccharibacteria")] <- "Saccharibacteria"
taxonomy <- taxonomy[taxonomy$Genus!="cellular",]
taxonomy$Genus[which(taxonomy$Genus=="bacterium")] <- "Bacterium"
library("SIAMCAT")
tss = function(X){
return(t(t(X)/colSums(X)))
}
all(colnames(count) == meta$Sample_ID)
meta.crc <- meta %>%
filter(Study %in% include_study) %>%
filter(Group %in% c('Control', 'CRC'))
feat.rel.crc = tss(count)
temp.max.ab = t(sapply(row.names(feat.rel.crc),
FUN=function(marker){sapply(unique(meta.crc$Study),
FUN=function(study, marker){
max.ab = max(feat.rel.crc[marker, which(meta.crc$Study == study)])
},
marker=marker)}))
### low abundance filter
f.idx = rowSums(temp.max.ab >= 1e-03) >= 3 &
row.names(feat.rel.crc) != '-1'
feat.rel.red = feat.rel.crc[f.idx,]
meta = meta.crc
feat.all = feat.rel.red
# filter out taxa
count_filter = count[f.idx,]
# check if all the taxa in taxonomy table
sum(!rownames(count_filter)%in%taxonomy$taxa)
taxonomy_filter = taxonomy[which(taxonomy$taxa%in%rownames(count_filter)),c(1,4)]
colnames(taxonomy_filter) = c("Genus","Species")
rownames(taxonomy_filter) = taxonomy_filter$Species
library(MetaDICT)
metadict_meta = data.frame("Group" = meta.crc$Group, "batch" = meta.crc$Study)
rownames(metadict_meta) = colnames(count_filter)
load("../models/metadict_fig5_species_tss.RData")
metadict_feat = species_metadict$count
feat.all = tss(metadict_feat)
meta = meta.crc
models_metadict <- list()
ml.method <- 'LASSO'
for (study in include_study){
# single study model
meta.train <- meta %>%
filter(Study == study)
feat.train <- feat.all[,meta.train %>% pull(Sample_ID)]
meta.train <- data.frame(meta.train)
rownames(meta.train) <- meta.train$Sample_ID
siamcat <- siamcat(feat=feat.train, meta=meta.train,
label = 'Group', case='CRC')
siamcat <- normalize.features(siamcat, norm.method = 'log.std',
norm.param = list(log.n0 = 1e-5, sd.min.q = 0.1, n.p = 2), feature.type = 'original',
verbose=3)
siamcat <- create.data.split(siamcat, num.folds = 10,
num.resample = 10)
siamcat <- train.model(siamcat,
method = 'lasso',
measure = 'classif.auc',
min.nonzero = 1,
perform.fs = FALSE)
siamcat <- make.predictions(siamcat)
siamcat <- evaluate.predictions(siamcat)
models_metadict[[study]] <- siamcat
#save(siamcat, file=paste0('../models/',study, '_',
#                          ml.method ,'_metadict_model.RData'))
cat("Successfully trained a single study model for study", study, '\n')
# LOSO models
meta.train <- meta %>%
filter(Study != study)
feat.train <- feat.all[,meta.train %>% pull(Sample_ID)]
meta.train <- data.frame(meta.train)
rownames(meta.train) <- meta.train$Sample_ID
siamcat <- siamcat(feat=feat.train, meta=meta.train,
label = 'Group', case='CRC')
siamcat <- normalize.features(siamcat, norm.method = 'log.std',
norm.param = list(log.n0 = 1e-5, sd.min.q = 0.1), feature.type = 'original',
verbose=3)
siamcat <- create.data.split(siamcat, num.folds = 10,
num.resample = 10)
siamcat <- train.model(siamcat,
method = 'lasso',
measure = 'classif.auc',
min.nonzero = 1,
perform.fs = FALSE)
siamcat <- make.predictions(siamcat)
siamcat <- evaluate.predictions(siamcat)
models_metadict[[paste0(study, '_LOSO')]] <- siamcat
#save(siamcat, file=paste0('../models/', study, '_loso_',
#                          ml.method, '_metadict_model.RData'))
cat("Successfully trained a LOSO model for study", study, '\n')
}
auroc.all.metadict <- tibble()
pred.matrix.metadict <- matrix(NA, nrow=nrow(meta),
ncol=length(include_study)+1,
dimnames = list(meta$Sample_ID,
c(include_study, 'LOSO')))
for (study in include_study){
# load model
siamcat <- models_metadict[[study]]
temp <- rowMeans(pred_matrix(siamcat))
pred.matrix.metadict[names(temp), study] <- temp
# predict other studies
for (study_ext in setdiff(include_study, study)){
meta.test <- meta %>%
filter(Study == study_ext)
feat.test <- feat.all[,meta.test %>% pull(Sample_ID)]
meta.test <- data.frame(meta.test)
rownames(meta.test) <- meta.test$Sample_ID
#siamcat.test <- siamcat(feat=feat.test)
siamcat.test <- siamcat(feat=feat.test, meta=meta.test,
label = 'Group', case='CRC')
siamcat.test <- make.predictions(siamcat, siamcat.holdout = siamcat.test)
temp <- evaluate.predictions(siamcat.test)
#pred.matrix.metadict[names(temp), study] <- temp
auroc.all.metadict <- bind_rows(auroc.all.metadict,
tibble(study.train=study,
study.test=study_ext,
AUC=c(eval_data(temp)$auroc)))
}
}
# ##############################################################################
# make LOSO Predictions
for (study in include_study){
# load model
siamcat <- models_metadict[[paste0(study, '_LOSO')]]
meta.test <- meta %>%
filter(Study == study)
feat.test <- feat.all[,meta.test %>% pull(Sample_ID)]
meta.test <- data.frame(meta.test)
rownames(meta.test) <- meta.test$Sample_ID
#siamcat.test <- siamcat(feat=feat.test)
siamcat.test <- siamcat(feat=feat.test, meta=meta.test,
label = 'Group', case='CRC')
siamcat.test <- make.predictions(siamcat, siamcat.holdout = siamcat.test)
#temp <- rowMeans(pred_matrix(siamcat.test))
#pred.matrix.metadict[names(temp), 'LOSO'] <- temp
temp <- evaluate.predictions(siamcat.test)
auroc.all.metadict <- bind_rows(auroc.all.metadict,
tibble(study.train="LOSO",
study.test=study,
AUC=c(eval_data(temp)$auroc)))
}
auroc.all.metadict$study.train = as.factor(auroc.all.metadict$study.train)
avg_model.metadict =  auroc.all.metadict %>%
filter(study.test != study.train) %>%
filter(study.train != "LOSO")%>%
group_by(study.train) %>%
summarise(AUC=mean(AUC)) %>%
mutate(study.train=factor(study.train, levels=rev(include_study)))
avg_model.metadict$study.test = "Average"
auroc.all.table.metadict = rbind(auroc.all.metadict, avg_model.metadict)
auroc.all.table.metadict$method = "MetaDICT"
mean(auroc.all.table.metadict$AUC>auroc.all.table$AUC)
View(auroc.all.table.metadict)
auroc.all.table = read.csv(file = "../models/lasso_unprocessed.csv")
mean(auroc.all.table.metadict$AUC>auroc.all.table$AUC)
library(ggpubr)
library(dplyr)
library(ggraph)
library(stringr)
library(ggplot2)
library(scales)
library(viridis)
library(effsize)
library(MBESS)
library(MicrobiomeStat)
library(reshape2)
library(randomForest)
library(caret)
library(pROC)
library(ConQuR)
library(doParallel)
library(MMUPHin)
library(sva)
library(PLSDAbatch)
library(ecodist)
library(vegan)
library(igraph)
library(tidygraph)
library(ggforce)
library(SIAMCAT)
library(tibble)
source("./function.R")
load("../data/Rawdata_Wirbel/motus_taxonomy_2.5.1.Rdata")
# counts
count <- read.table("../data/Rawdata_Wirbel/species_profiles_g2_l75_motus2.0.0.tsv",
sep='\t',stringsAsFactors = FALSE,
header = TRUE, check.names = FALSE, row.names = 1,
quote='')
meta <- readr::read_tsv("../data/Rawdata_Wirbel/meta_all.tsv")
include_study <- c("FR-CRC","DE-CRC","CN-CRC","US-CRC","AT-CRC" )
meta <- meta %>%
filter(Study %in% include_study) %>%
filter(Group %in% c('CTR', 'CRC'))
meta$Group[meta$Group == "CTR"] <- "Control"
all_taxonomy <- motus2.5_taxonomy
count <- count[,meta$Sample_ID]
#load(url("https://github.com/AlessioMilanese/motus_taxonomy/blob/master/data/motus_taxonomy_2.5.1.Rdata?raw=true"))
# adjust taxonomy format
taxonomy <- str_split_fixed(rownames(count)," ",3)
taxonomy <- as.data.frame(taxonomy)
colnames(taxonomy) <- c("Genus","Species","OTU")
taxonomy$taxa <- rownames(count)
taxonomy$Species[str_detect(taxonomy$taxa,"alpha proteobacterium")] <- str_split_fixed(taxonomy$taxa[str_detect(taxonomy$taxa,"alpha proteobacterium")],"\\[",2)[,1]
select_taxa <- which(str_detect(taxonomy$taxa,"alpha proteobacterium")==T)
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
taxonomy$Genus[i] <- all_taxonomy$Genus[str_detect(all_taxonomy$Species,taxonomy$Species[i])][1]
}
taxonomy$Species[str_detect(taxonomy$taxa,"butyrate-producing")] <- str_split_fixed(taxonomy$taxa[str_detect(taxonomy$taxa,"butyrate-producing")],"\\[",2)[,1]
select_taxa <- which(str_detect(taxonomy$taxa,"butyrate-producing")==T)
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
taxonomy$Genus[i] <- all_taxonomy$Genus[str_detect(all_taxonomy$Species,taxonomy$Species[i])][1]
}
taxonomy$Species[str_detect(taxonomy$taxa,"uncultured")] <- str_split_fixed(taxonomy$taxa[str_detect(taxonomy$taxa,"uncultured")],"\\[",2)[,1]
select_taxa <- which(str_detect(taxonomy$taxa,"uncultured")==T)
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
if(taxonomy$Species[i]=="uncultured candidatus Thalassoarchaea euryarchaeot"){
taxonomy$Genus[i] <- "Euryarchaeota gen. incertae sedis"
}else{
taxonomy$Genus[i] <- all_taxonomy$Genus[str_detect(all_taxonomy$Species,taxonomy$Species[i])][1]
}
}
taxonomy$Genus[which(taxonomy$Genus=="unknown")] <- taxonomy$Species[which(taxonomy$Genus=="unknown")]
select_taxa <- which(taxonomy$Genus=="candidatus")
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
if(str_detect(taxonomy$taxa[i],"unknown")){
taxonomy$Species[i] <- str_split_fixed(taxonomy$taxa[i],"\\[",2)[1]
taxonomy$Genus[i] <- gsub("unknown", "", taxonomy$Species[i])
}else{
taxonomy$Genus[i] <- paste(taxonomy$Genus[i],taxonomy$Species[i])
}
taxonomy$Genus[i] <- gsub("candidatus", "Candidatus", taxonomy$Species[i])
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "left")
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "right")
}
taxonomy$Genus <- gsub("unknown ","",taxonomy$Genus)
select_taxa <- which(taxonomy$Genus=="cand.")
for(i in select_taxa){
taxonomy$Species[i] <- str_trim(taxonomy$Species[i], "right")
if(str_detect(taxonomy$taxa[i],"unknown")){
taxonomy$Species[i] <- str_split_fixed(taxonomy$taxa[i],"\\[",2)[1]
taxonomy$Genus[i] <- gsub("unknown", "", taxonomy$Species[i])
}else{
taxonomy$Genus[i] <- paste(taxonomy$Genus[i],taxonomy$Species[i])
}
taxonomy$Genus[i] <- gsub("candidatus", "Candidatus", taxonomy$Species[i])
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "left")
taxonomy$Genus[i] <- str_trim(taxonomy$Genus[i], "right")
}
taxonomy$Genus[which(taxonomy$Genus=="1730 Eubacterium")] <- "Eubacterium"
taxonomy$Genus[which(taxonomy$Genus=="1485 Clostridium")] <- "Clostridium"
taxonomy$Genus[which(taxonomy$Genus=="41275 Brevundimonas")] <- "Brevundimonas"
taxonomy$Genus[which(taxonomy$Genus=="Candidatus Saccharibacteria")] <- "Saccharibacteria"
taxonomy <- taxonomy[taxonomy$Genus!="cellular",]
taxonomy$Genus[which(taxonomy$Genus=="bacterium")] <- "Bacterium"
# check taxa without taxonomy information
sum(!rownames(count)%in%taxonomy$taxa)
sum(rowSums(count)==0)
# filter out these taxa
count_species = count[rownames(count)%in%taxonomy$taxa,]
count_species = count_species[rowSums(count_species)!=0,]
# Prepare input for metadict
metadict_meta = data.frame("Group" = meta$Group, "batch" = meta$Study)
rownames(metadict_meta) = colnames(count_species)
taxonomy_species = taxonomy[which(taxonomy$taxa%in%rownames(count_species)),c(1,4)]
colnames(taxonomy_species) = c("Genus","Species")
rownames(taxonomy_species) = taxonomy_species$Species
all(rownames(taxonomy_species)==rownames(count_species))
library(MetaDICT)
species_metadict_res = MetaDICT(count_species, metadict_meta, taxonomy = taxonomy_species, tax_level = "Species", customize_parameter = T, alpha = 0.01, optim_trace = T)
metadict_species = species_metadict_res$count
# Rename species name for random forest
rownames(metadict_species) = paste0("Taxon",seq_len(nrow(metadict_species)))
metadict_list <- seperate_data(metadict_species, meta$Study)
set.seed(2024)
seeds <- vector(mode = "list", length = 6)
for(i in 1:5) seeds[[i]]<- sample.int(n=1000, 3)
seeds[[6]] <- sample.int(n=1000, 1)
RF_pred <- function(train, test, trainy, testy, label = "CRC", cv_num = 5) {
dataset <- data.frame(trainy, t(train))
control <- trainControl(
method = "cv",
number = cv_num,
summaryFunction = twoClassSummary,
classProbs = TRUE,
seeds = seeds
)
# Train random forest model
rf <- train(
trainy ~ ., data = dataset,
method = "rf",
metric = "ROC",
trControl = control,
ntree = 500
)
# Predict probabilities on the test set
test_probs <- predict(rf, newdata = t(test), type = "prob")
# Extract probability for the positive class
positive_probs <- test_probs[[label]]
# Compute ROC
roc_object <- roc(response = testy, predictor = positive_probs, direction = "<")
return(roc_object)
}
# Helper function to extract count for each dataset
seperate_data = function(data, batchid){
include_study <- unique(batchid)
nbatch <- length(include_study)
data.list <- vector("list", nbatch)
for (i in seq_len(nbatch)) {
idx <- which(batchid == include_study[i])
data.list[[i]] <- data[, idx]
}
return(data.list)
}
# Rename species name for random forest
rownames(metadict_species) = paste0("Taxon",seq_len(nrow(metadict_species)))
metadict_list <- seperate_data(metadict_species, meta$Study)
# CRC labels for each dataset
include_study <- unique(meta$Study)
nbatch <- length(include_study)
y.list <- vector("list", length(include_study))
Y = factor(meta$Group, levels = c("Control","CRC"))
for(i in seq_len(nbatch)){
idx <- which(meta$Study == include_study[i])
y.list[[i]] <- Y[idx]
print(length(idx))
}
# Initialize dataframes
auc_res <- data.frame(auc = numeric(), method = character(), train = character(), test = character())
set.seed(2025)
for (j in seq_len(nbatch)) {
idx <- which(meta$Study != include_study[j])
metadict_res <- RF_pred(metadict_species[,idx], metadict_list[[j]], as.factor(meta$Group[idx]), as.factor(y.list[[j]]), cv_num = 3)
auc_res <- rbind(auc_res, data.frame(auc = auc(metadict_res),
method = "MetaDICT",
train = "LOSO",
test = include_study[j]))
unprocessed_res <- RF_pred(count_species[,idx], unprocessed_list[[j]], as.factor(meta$Group[idx]), as.factor(y.list[[j]]), cv_num = 3)
auc_res <- rbind(auc_res, data.frame(auc = auc(unprocessed_res),
method = "Unprocessed",
train = "LOSO",
test = include_study[j]))
}
# Rename species name for random forest
rownames(metadict_species) = paste0("Taxon",seq_len(nrow(metadict_species)))
metadict_list <- seperate_data(metadict_species, meta$Study)
unprocessed_list <- seperate_data(count_species,meta$Study)
# CRC labels for each dataset
include_study <- unique(meta$Study)
nbatch <- length(include_study)
y.list <- vector("list", length(include_study))
Y = factor(meta$Group, levels = c("Control","CRC"))
for(i in seq_len(nbatch)){
idx <- which(meta$Study == include_study[i])
y.list[[i]] <- Y[idx]
print(length(idx))
}
# Initialize dataframes
auc_res <- data.frame(auc = numeric(), method = character(), train = character(), test = character())
set.seed(2025)
for (j in seq_len(nbatch)) {
idx <- which(meta$Study != include_study[j])
metadict_res <- RF_pred(metadict_species[,idx], metadict_list[[j]], as.factor(meta$Group[idx]), as.factor(y.list[[j]]), cv_num = 3)
auc_res <- rbind(auc_res, data.frame(auc = auc(metadict_res),
method = "MetaDICT",
train = "LOSO",
test = include_study[j]))
unprocessed_res <- RF_pred(count_species[,idx], unprocessed_list[[j]], as.factor(meta$Group[idx]), as.factor(y.list[[j]]), cv_num = 3)
auc_res <- rbind(auc_res, data.frame(auc = auc(unprocessed_res),
method = "Unprocessed",
train = "LOSO",
test = include_study[j]))
}
# Rename species name for random forest
rownames(metadict_species) = paste0("Taxon",seq_len(nrow(metadict_species)))
rownames(count_species) = paste0("Taxon",seq_len(nrow(count_species)))
metadict_list <- seperate_data(metadict_species, meta$Study)
unprocessed_list <- seperate_data(count_species,meta$Study)
# Initialize dataframes
auc_res <- data.frame(auc = numeric(), method = character(), train = character(), test = character())
set.seed(2025)
for (j in seq_len(nbatch)) {
idx <- which(meta$Study != include_study[j])
metadict_res <- RF_pred(metadict_species[,idx], metadict_list[[j]], as.factor(meta$Group[idx]), as.factor(y.list[[j]]), cv_num = 3)
auc_res <- rbind(auc_res, data.frame(auc = auc(metadict_res),
method = "MetaDICT",
train = "LOSO",
test = include_study[j]))
unprocessed_res <- RF_pred(count_species[,idx], unprocessed_list[[j]], as.factor(meta$Group[idx]), as.factor(y.list[[j]]), cv_num = 3)
auc_res <- rbind(auc_res, data.frame(auc = auc(unprocessed_res),
method = "Unprocessed",
train = "LOSO",
test = include_study[j]))
}
pred_ac_res <- auc_res
pred_ac_res$auc <- as.numeric(pred_ac_res$auc)
methods <- unique(pred_ac_res$method)
train_set <- unique(pred_ac_res$train)
for (m in methods) {
avg_values <- sapply(train_set, function(tr) {
mean(pred_ac_res$auc[
pred_ac_res$train == tr &
pred_ac_res$test != tr &
pred_ac_res$method == m
])
})
avg_df <- data.frame(
auc = avg_values,
train  = train_set,
method   = m,
test   = "Average"
)
pred_ac_res <- rbind(pred_ac_res, avg_df)
}
write.csv(pred_ac_res,file = "../result/realdata_rf_species_loso.csv")
View(pred_ac_res)
tss = function(X){
return(t(t(X)/colSums(X)))
}
all(colnames(count) == meta$Sample_ID)
setwd("~/Desktop/Desktop - Bo’s MacBook Air/MetaDICT/")
devtools::check()
BiocCheck::BiocCheck('new-package'=TRUE)
devtools::check()
