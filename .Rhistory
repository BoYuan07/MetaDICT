}
Stat=rep(0,4)
Diffstat<-standEdge(EdgeOriP,EdgeOriQ,mP,mQ)
Stat[1]<-max(Diffstat)
Diffstat<-standEdge(EdgeLogP,EdgeLogQ,mP,mQ)
Stat[2]<-max(Diffstat)
SST1=sum(DistanceMatrix1, na.rm = TRUE)/(mP+mQ)
SSW1=sum(DistanceMatrix1[1:mP,1:mP], na.rm = TRUE)/mP+sum(DistanceMatrix1[(mP+1):(mP+mQ),(mP+1):(mP+mQ)], na.rm = TRUE)/mQ
SSA1=SST1-SSW1
Stat[3]=SSA1/SSW1*(mP+mQ-2)
SST2=sum(DistanceMatrix2, na.rm = TRUE)/(mP+mQ)
SSW2=sum(DistanceMatrix2[1:mP,1:mP], na.rm = TRUE)/mP+sum(DistanceMatrix2[(mP+1):(mP+mQ),(mP+1):(mP+mQ)], na.rm = TRUE)/mQ
SSA2=SST2-SSW2
Stat[4]=SSA2/SSW2*(mP+mQ-2)
SimulatedRe<-matrix(0, nrow=4, ncol=times)
for (i in 1:times)
{
sampleQ=1:(mP+mQ)
sampleP=sample(sampleQ,mP)
sampleQ=sampleQ[!(sampleQ %in% sampleP)]
sampleEdgeOriP=EdgeOriPQ[,sampleP]
sampleEdgeOriQ=EdgeOriPQ[,sampleQ]
sampleEdgeLogP=EdgeLogPQ[,sampleP]
sampleEdgeLogQ=EdgeLogPQ[,sampleQ]
sDiffstat<-standEdge(sampleEdgeOriP,sampleEdgeOriQ,mP,mQ)
SimulatedRe[1,i]<-max(sDiffstat)
sDiffstat<-standEdge(sampleEdgeLogP,sampleEdgeLogQ,mP,mQ)
SimulatedRe[2,i]<-max(sDiffstat)
SSW1=sum(DistanceMatrix1[sampleP,sampleP], na.rm = TRUE)/mP+sum(DistanceMatrix1[sampleQ,sampleQ], na.rm = TRUE)/mQ
SSA1=SST1-SSW1
SimulatedRe[3,i]<-SSA1/SSW1*(mP+mQ-2)
SSW2=sum(DistanceMatrix2[sampleP,sampleP], na.rm = TRUE)/mP+sum(DistanceMatrix2[sampleQ,sampleQ], na.rm = TRUE)/mQ
SSA2=SST2-SSW2
SimulatedRe[4,i]<-SSA2/SSW2*(mP+mQ-2)
}
alpha=0.05
StatThre = rep(0,4)
Decision = rep(TRUE,4)
for(i in 1:4)
{
StatThre[i] <- quantile(SimulatedRe[i,],1-alpha)
Decision[i] <- Stat[i]>StatThre[i]
}
return(Decision)
}
Compare2MethodIndentify <- function(mP,mQ,alphaP,alphaQ,n,Tree,times,ActiveNode)
{
DataPQ=DataGenerating(mP,mQ,alphaP,alphaQ,n)
oriP=DataPQ$P
oriQ=DataPQ$Q
logP=oriP
logQ=oriQ
for (i in 1:mP)
{
x=oriP[,i]*n
x[x==0]=0.5
x=x/sum(x)
logP[,i]=log(x)
logP[,i]=logP[,i]-mean(logP[,i])
}
for (i in 1:mQ)
{
x=oriQ[,i]*n
x[x==0]=0.5
x=x/sum(x)
logQ[,i]=log(x)
logQ[,i]=logQ[,i]-mean(logQ[,i])
}
EdgeOriP<-AccuProbMt(oriP,Tree)
EdgeOriQ<-AccuProbMt(oriQ,Tree)
EdgeLogP<-AccuProbMt(logP,Tree)
EdgeLogQ<-AccuProbMt(logQ,Tree)
EdgeOriPQ=cbind(EdgeOriP,EdgeOriQ)
EdgeLogPQ=cbind(EdgeLogP,EdgeLogQ)
EdgeL=EdgeLExtract(Tree)
EdgeL[is.na(EdgeL)]=0
Diffstat1<-standEdge(EdgeOriP,EdgeOriQ,mP,mQ)
Diffstat2<-standEdge(EdgeLogP,EdgeLogQ,mP,mQ)
SimulatedRe<-matrix(0, nrow=2, ncol=times)
for (i in 1:times)
{
sampleQ=1:(mP+mQ)
sampleP=sample(sampleQ,mP)
sampleQ=sampleQ[!(sampleQ %in% sampleP)]
sampleEdgeOriP=EdgeOriPQ[,sampleP]
sampleEdgeOriQ=EdgeOriPQ[,sampleQ]
sampleEdgeLogP=EdgeLogPQ[,sampleP]
sampleEdgeLogQ=EdgeLogPQ[,sampleQ]
sDiffstat<-standEdge(sampleEdgeOriP,sampleEdgeOriQ,mP,mQ)
SimulatedRe[1,i]<-max(sDiffstat)
sDiffstat<-standEdge(sampleEdgeLogP,sampleEdgeLogQ,mP,mQ)
SimulatedRe[2,i]<-max(sDiffstat)
}
alpha=0.05
StatThre1 = quantile(SimulatedRe[1,],1-alpha)
StatThre2 = quantile(SimulatedRe[2,],1-alpha)
Nodes=1:length(Diffstat)
Nodes1=Nodes[Diffstat1>StatThre1]
Nodes2=Nodes[Diffstat2>StatThre2]
Re=rep(0,4)
Re[1]=sum(!(Nodes1 %in% ActiveNode))
Re[2]=sum(!(Nodes2 %in% ActiveNode))
Re[3]=sum((ActiveNode %in% Nodes1))
Re[4]=sum((ActiveNode %in% Nodes2))
return(Re)
}
Tree=rtree(100)
gg85 <- get_gg13.8_85MgDb()
gamma_16S <- mgDb_select(gg85,
type = "all",
keys = "Gammaproteobacteria",
keytype = "Class")
Tree=rtree(100)
gg85 <- get_gg13.8_85MgDb()
gamma_16S <- mgDb_select(gg85,
type = "all",
keys = "Gammaproteobacteria",
keytype = "Class")
gg85 <- get_gg13.8_85MgDb()
# select taxa only
mgDb_select(gg85, type = "taxa",
keys = c("Vibrionaceae", "Enterobacteriaceae"),
keytype = "Family")
gg85 <- get_gg13.8_85MgDb()
# select taxa only
mgDb_select(gg85, type = "taxa",
keys = c("Vibrionaceae", "Enterobacteriaceae"),
keytype = "Family")
install.packages("tidyverse")
gg85 <- get_gg13.8_85MgDb()
# select taxa only
mgDb_select(gg85, type = "taxa",
keys = c("Vibrionaceae", "Enterobacteriaceae"),
keytype = "Family")
library(metagenomeFeatures)
Tree=rtree(100)
gg85 <- get_gg13.8_85MgDb()
gamma_16S <- mgDb_select(gg85,
type = "all",
keys = "Gammaproteobacteria",
keytype = "Class")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(metagenomeFeatures)
Tree=rtree(100)
library(metagenomeFeatures)
library(ape)
Tree=rtree(100)
gg85 <- get_gg13.8_85MgDb()
gamma_16S <- mgDb_select(gg85,
type = "all",
keys = "Gammaproteobacteria",
keytype = "Class")
###############################################
## Function
###############################################
DataGenerating <- function(mP,mQ,alphaP,alphaQ,n)
{
trP=t(rdirichlet(mP, alphaP))
trQ=t(rdirichlet(mQ, alphaQ))
for (i in 1:mP)
{
trP[,i]=rmultinom(1,n,trP[,i])
trP[,i]=trP[,i]/sum(trP[,i])
}
for (i in 1:mQ)
{
trQ[,i]=rmultinom(1,n,trQ[,i])
trQ[,i]=trQ[,i]/sum(trQ[,i])
}
return(list(P=trP,Q=trQ))
}
##################################################
## Example
##################################################
library(metagenomeFeatures)
library(ape)
gg85 <- get_gg13.8_85MgDb()
tree=gg85@tree
metadata <- list(ACCESSION_DATE = date(),
URL = "ftp://greengenes.microbio.me/greengenes_release/gg_13_8_otus",
DB_TYPE_NAME = "GreenGenes",
DB_VERSION = "13.8 85% OTUS",
DB_TYPE_VALUE = "MgDb",
DB_SCHEMA_VERSION = "2.0")
gg_db_file <- system.file("extdata", 'gg13.8_85.sqlite',
package = "metagenomeFeatures")
db_conn <- dbConnect(SQLite(), gg_db_file)
##################################################
## Example
##################################################
library(metagenomeFeatures)
library(ape)
library(DBI)
gg85 <- get_gg13.8_85MgDb()
tree=gg85@tree
metadata <- list(ACCESSION_DATE = date(),
URL = "ftp://greengenes.microbio.me/greengenes_release/gg_13_8_otus",
DB_TYPE_NAME = "GreenGenes",
DB_VERSION = "13.8 85% OTUS",
DB_TYPE_VALUE = "MgDb",
DB_SCHEMA_VERSION = "2.0")
gg_db_file <- system.file("extdata", 'gg13.8_85.sqlite',
package = "metagenomeFeatures")
db_conn <- dbConnect(SQLite(), gg_db_file)
library(gtools)
library(tidytree)
library(foreach)
library(doParallel)
library(doRNG)
library(ggtree)
library(gtools)
library(tidytree)
library(foreach)
library(doParallel)
library(doRNG)
#library(ggtree)
library(xtable)
#source('../../Code/Algorithm.R')
#source('../../Code/OtherMethod.R')
#setwd("./C1")
library(Biostrings)
library(RSQLite)
library(DECIPHER)
library(lazyeval)
library(tidyverse)
library(ape)
library(metagenomeFeatures)
library(ggtree)
library(gtools)
library(tidytree)
library(foreach)
library(doParallel)
library(doRNG)
#library(ggtree)
library(xtable)
#source('../../Code/Algorithm.R')
#source('../../Code/OtherMethod.R')
#setwd("./C1")
library(Biostrings)
library(RSQLite)
library(DECIPHER)
library(lazyeval)
library(tidyverse)
library(ape)
library(metagenomeFeatures)
#library(ggtree)
jobid <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
simu.iter = jobid
set.seed(jobid)
library(gtools)
library(tidytree)
library(foreach)
library(doParallel)
library(doRNG)
#library(ggtree)
library(xtable)
#source('../../Code/Algorithm.R')
#source('../../Code/OtherMethod.R')
#setwd("./C1")
library(Biostrings)
library(RSQLite)
library(DECIPHER)
library(lazyeval)
library(tidyverse)
library(ape)
library(metagenomeFeatures)
#library(ggtree)
#jobid <- as.numeric(Sys.getenv("SLURM_ARRAY_TASK_ID"))
#simu.iter = jobid
#set.seed(jobid)
gg85 <- get_gg13.8_85MgDb()
tree=gg85@tree
metadata <- list(ACCESSION_DATE = date(),
URL = "ftp://greengenes.microbio.me/greengenes_release/gg_13_8_otus",
DB_TYPE_NAME = "GreenGenes",
DB_VERSION = "13.8 85% OTUS",
DB_TYPE_VALUE = "MgDb",
DB_SCHEMA_VERSION = "2.0")
gg_db_file <- system.file("extdata", 'gg13.8_85.sqlite',
package = "metagenomeFeatures")
db_conn <- dbConnect(SQLite(), gg_db_file)
taxa_dbi <- dplyr::tbl(src = db_conn, from = "Seqs")
type="all"
keys = "Gammaproteobacteria"
keytype = "Class"
columns = "all"
taxaDb=taxa_dbi
metaDb=metadata
if (!is.null(keys)) {
if (keytype !=  "Keys") {
level_id <- stringr::str_sub(string = keytype,
start = 1,
end = 1) %>%
tolower() %>% rep(length(keys))
if (metaDb$DB_TYPE_NAME == "GreenGenes") {
keys <- stringr::str_c(level_id,keys,sep = "__")
}
}
select_tbl <- dplyr::filter(taxaDb, Class ==  keys)
}else{
select_tbl <- taxaDb
}
if (columns[1] != "all") {
select_tbl <- dplyr::select(select_tbl, .dots = columns)
}
taxa_df <- collect(select_tbl)
ids=taxa_df$Keys
drop_tips <- tree$tip.label[!(tree$tip.label %in% ids)]
tree<-ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
##################################################
## Example
##################################################
library(metagenomeFeatures)
library(ape)
library(DBI)
library(RSQLite)
gg85 <- get_gg13.8_85MgDb()
tree=gg85@tree
metadata <- list(ACCESSION_DATE = date(),
URL = "ftp://greengenes.microbio.me/greengenes_release/gg_13_8_otus",
DB_TYPE_NAME = "GreenGenes",
DB_VERSION = "13.8 85% OTUS",
DB_TYPE_VALUE = "MgDb",
DB_SCHEMA_VERSION = "2.0")
gg_db_file <- system.file("extdata", 'gg13.8_85.sqlite',
package = "metagenomeFeatures")
db_conn <- dbConnect(SQLite(), gg_db_file)
taxa_dbi <- dplyr::tbl(src = db_conn, from = "Seqs")
type="all"
keys = "Gammaproteobacteria"
keytype = "Class"
columns = "all"
taxaDb=taxa_dbi
metaDb=metadata
if (!is.null(keys)) {
if (keytype !=  "Keys") {
level_id <- stringr::str_sub(string = keytype,
start = 1,
end = 1) %>%
tolower() %>% rep(length(keys))
if (metaDb$DB_TYPE_NAME == "GreenGenes") {
keys <- stringr::str_c(level_id,keys,sep = "__")
}
}
select_tbl <- dplyr::filter(taxaDb, Class ==  keys)
}else{
select_tbl <- taxaDb
}
if (columns[1] != "all") {
select_tbl <- dplyr::select(select_tbl, .dots = columns)
}
taxa_df <- collect(select_tbl)
ids=taxa_df$Keys
drop_tips <- tree$tip.label[!(tree$tip.label %in% ids)]
tree<-ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
Tree$tip.label<-1:247
###############################################
## Function
###############################################
DataGenerating <- function(mP,mQ,alphaP,alphaQ,n)
{
trP=t(rdirichlet(mP, alphaP))
trQ=t(rdirichlet(mQ, alphaQ))
for (i in 1:mP)
{
trP[,i]=rmultinom(1,n,trP[,i])
trP[,i]=trP[,i]/sum(trP[,i])
}
for (i in 1:mQ)
{
trQ[,i]=rmultinom(1,n,trQ[,i])
trQ[,i]=trQ[,i]/sum(trQ[,i])
}
return(list(P=trP,Q=trQ))
}
tree$tip.label<-1:247
mP=100
mQ=100
n=1000
times=200
alphaP=c(rep(1,length(tree$tip.label)),rep(0,tree$Nnode))
alphaQ=c(rep(1,length(tree$tip.label)),rep(0,tree$Nnode))
alphaQ[169]=alphaQ[169]+delta
mP=100
mQ=100
n=1000
times=200
m = 200
delta = 0.5
mP=m
mQ=m
alphaP=c(rep(1,length(tree$tip.label)),rep(0,tree$Nnode))
alphaQ=c(rep(1,length(tree$tip.label)),rep(0,tree$Nnode))
alphaQ[169]=alphaQ[169]+delta
alphaQ[170]=alphaQ[170]-delta
DataPQ=DataGenerating(mP,mQ,alphaP,alphaQ,n)
P=DataPQ$P
Q=DataPQ$Q
DAFOT(P,Q,tree,times,0.05)
devtools::install_github("lakerwsl/DAFOT")
library(DAFOT)
DAFOT(P,Q,tree,times,0.05)
###############################################
## Function
###############################################
DataGenerating <- function(mP,mQ,alphaP,alphaQ,n)
{
trP=t(rdirichlet(mP, alphaP))
trQ=t(rdirichlet(mQ, alphaQ))
for (i in 1:mP)
{
trP[,i]=rmultinom(1,n,trP[,i])
trP[,i]=trP[,i]/sum(trP[,i])
}
for (i in 1:mQ)
{
trQ[,i]=rmultinom(1,n,trQ[,i])
trQ[,i]=trQ[,i]/sum(trQ[,i])
}
return(list(P=trP,Q=trQ))
}
##################################################
## Example
##################################################
library(metagenomeFeatures)
library(ape)
library(DBI)
library(RSQLite)
library(DAFOT)
gg85 <- get_gg13.8_85MgDb()
tree=gg85@tree
metadata <- list(ACCESSION_DATE = date(),
URL = "ftp://greengenes.microbio.me/greengenes_release/gg_13_8_otus",
DB_TYPE_NAME = "GreenGenes",
DB_VERSION = "13.8 85% OTUS",
DB_TYPE_VALUE = "MgDb",
DB_SCHEMA_VERSION = "2.0")
gg_db_file <- system.file("extdata", 'gg13.8_85.sqlite',
package = "metagenomeFeatures")
db_conn <- dbConnect(SQLite(), gg_db_file)
taxa_dbi <- dplyr::tbl(src = db_conn, from = "Seqs")
type="all"
keys = "Gammaproteobacteria"
keytype = "Class"
columns = "all"
taxaDb=taxa_dbi
metaDb=metadata
if (!is.null(keys)) {
if (keytype !=  "Keys") {
level_id <- stringr::str_sub(string = keytype,
start = 1,
end = 1) %>%
tolower() %>% rep(length(keys))
if (metaDb$DB_TYPE_NAME == "GreenGenes") {
keys <- stringr::str_c(level_id,keys,sep = "__")
}
}
select_tbl <- dplyr::filter(taxaDb, Class ==  keys)
}else{
select_tbl <- taxaDb
}
if (columns[1] != "all") {
select_tbl <- dplyr::select(select_tbl, .dots = columns)
}
taxa_df <- collect(select_tbl)
ids=taxa_df$Keys
drop_tips <- tree$tip.label[!(tree$tip.label %in% ids)]
tree<-ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
tree$tip.label<-1:247
mP=100
mQ=100
n=1000
times=200
m = 200
delta = 0.5
mP=m
mQ=m
alphaP=c(rep(1,length(tree$tip.label)),rep(0,tree$Nnode))
alphaQ=c(rep(1,length(tree$tip.label)),rep(0,tree$Nnode))
alphaQ[169]=alphaQ[169]+delta
alphaQ[170]=alphaQ[170]-delta
DataPQ=DataGenerating(mP,mQ,alphaP,alphaQ,n)
P=DataPQ$P
Q=DataPQ$Q
DAFOT(P,Q,tree,times,0.05)
BiocManager::install("slingshot")
library(slingshot)
data("slingshotExample")
rd <- slingshotExample$rd
cl <- slingshotExample$cl
pto <- slingshot(rd, cl, start.clus = '1')
pto <- slingshot(rd, cl, start.clus = '1', useNames = F)
pto <- slingshot(rd, cl, start.clus = '1', useNames = T)
set.seed(1)
rnorm(1)
dnbinom(7,3,0.45)
phyper(3,14,23,17)
a = phyper(3,14,23,17)
load("./Desktop/MetaDICT/")
devtools::load_all("./Desktop/MetaDICT/")
help("metadict")
help("pcoa.plot.discrete")
help("community_detection")
help("pcoa.plot.continuous")
setwd("./Desktop/MetaDICT/")
devtools::document()
pbinom(11,30,0.34,lower.tail = F)
pbinom(12,30,0.34,lower.tail = F)
1-pbinom(11,30,0.34)
