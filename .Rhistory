knitr::opts_chunk$set(message = FALSE, warning = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(DT)
library(MetaDICT)
data("exampleData")
data(package = "MetaDICT")
devtools::check()
library(MetaDICT)
data("exampleData")
batchid = meta$batch
pcoa.plot.discrete(O,batchid,"Batches")
batchid = meta$batch
pcoa.plot.discrete(O,batchid,"Batch")
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
View(O)
View(taxonomy)
View(dist_mat)
View(meta)
rownames(O) = colnames(dist_mat)
colnames(O) = paste0("Sample",1:ncol(O))
rownames(meta) = pastep("Sample",1:ncol(O))
rownames(O) = colnames(dist_mat)
colnames(O) = paste0("Sample",1:ncol(O))
rownames(meta) = paste0("Sample",1:ncol(O))
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
rownames(O) = colnames(dist_mat)
colnames(O) = paste0("Sample",1:ncol(O))
rownames(meta) = paste0("Sample",1:ncol(O))
tree = ape::as.phylo(tree)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
library(MetaDICT)
data("exampleData")
batchid = meta$batch
pcoa.plot.discrete(O,batchid,"Batch")
rownames(O) = colnames(dist_mat)
colnames(O) = paste0("Sample",1:ncol(O))
rownames(meta) = paste0("Sample",1:ncol(O))
tree = ape::as.phylo(tree)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
remove.packages("MetaDICT")
devtools::load_all()
library(MetaDICT)
data("exampleData")
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
rownames(O) = colnames(dist_mat)
colnames(O) = paste0("Sample",1:ncol(O))
rownames(meta) = paste0("Sample",1:ncol(O))
tree = ape::as.phylo(tree)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::document()
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
library(MetaDICT)
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
head(O)
metadict_res = MetaDICT(O, meta, tree = tree)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, tree = tree)
metadict_res = MetaDICT(O, meta, taxonomy = taxonomy)
View(taxonomy)
metadict_res = MetaDICT(O, meta, taxonomy = taxonomy, tax_level = "order")
"order" %in% colnames(taxonomy)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, taxonomy = taxonomy, tax_level = "order")
adj_mat <- as.numeric(
outer(1:4, 1:4,
Vectorize(function(i, j) all(taxonomy[i, ] == taxonomy[j, ]))
)
)
adj_mat <- as.matrix(
outer(1:4, 1:4,
Vectorize(function(i, j) all(taxonomy[i, ] == taxonomy[j, ]))
)
)
View(adj_mat)
adj_mat <- as.matrix(as.numeric(
outer(1:4, 1:4,
Vectorize(function(i, j) all(taxonomy[i, ] == taxonomy[j, ]))
))
)
View(adj_mat)
adj_mat <- outer(1:4, 1:4, function(i, j) as.numeric(all(taxonomy[i, ] == taxonomy[j, ])))
adj_mat <- as.matrix(
outer(1:4, 1:4,
Vectorize(function(i, j) as.numeric((all(taxonomy[i, ] == taxonomy[j, ]))))
))
View(adj_mat)
View(taxonomy)
adj_mat <- as.matrix(
outer(1:4, 1:4,
Vectorize(function(i, j) as.numeric((all(taxonomy[i, 1:3] == taxonomy[j, 1:3]))))
))
View(adj_mat)
devtools::load_all()
library(MetaDICT)
metadict_res = MetaDICT(O, meta, taxonomy = taxonomy, tax_level = "order")
View(meta)
save(O,meta,tree,dist_mat,taxonomy,file = "../data/exampleData.rda")
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
X = metadict_res$count
D = metadict_res$D
R_list = metadict_res$R
w = metadict_res1w
X = metadict_res$count
D = metadict_res$D
R_list = metadict_res$R
w = metadict_resw
X = metadict_res$count
D = metadict_res$D
R_list = metadict_res$R
w = metadict_res$w
meta_output = metadict_res$meta
pcoa.plot.discrete(X,batchid,"Batch")
batchid = meta$batch
pcoa.plot.discrete(O,batchid,"Batch")
pcoa.plot.discrete(X,batchid,"Batch")
metadict_res1 = MetaDICT(O, meta, tree = tree)
X1 = metadict_res$count
pcoa.plot.discrete(X1,batchid,"Batch")
metadict_res1 = MetaDICT(O, meta, tree = tree)
X1 = metadict_res1$count
pcoa.plot.discrete(X1,batchid,"Batch")
metadict_res2 = MetaDICT(O, meta, taxonomy = taxonomy, tax_level = "order")
X2 = metadict_res2$X
pcoa.plot.discrete(X2,batchid,"Batch")
metadict_res2 = MetaDICT(O, meta, taxonomy = taxonomy, tax_level = "order")
X2 = metadict_res2$count
pcoa.plot.discrete(X2,batchid,"Batch")
metadict_res3 = MetaDICT(O,meta,covariates = c("Y"))
metadict_res3 = MetaDICT(O,meta,covariates = c("Y"), distance_matrix = dist_mat)
metadict_res3 = MetaDICT(O,meta,covariates = c("Y","Y2"), distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res3 = MetaDICT(O,meta,covariates = c("Y"), distance_matrix = dist_mat)
devtools::load_all()
library(MetaDICT)
metadict_res3 = MetaDICT(O,meta,covariates = c("Y"), distance_matrix = dist_mat)
meta_filtered <- meta[, c("Y"), drop = FALSE]
metadict_res3 = MetaDICT(O,meta,covariates = c("Y2"), distance_matrix = dist_mat)
# Create a list of sample IDs for each batch
sample_list <- lapply(batch_name, function(x) {
rownames(meta)[batchid == x]
})
batch_name = unique(batchid)
# Create a list of sample IDs for each batch
sample_list <- lapply(batch_name, function(x) {
rownames(meta)[batchid == x]
})
# For each study, subset the count.genus matrix using the corresponding sample IDs
O.list <- lapply(seq_along(batch_name), function(i) {
as.matrix(count[, sample_list[[i]]])
})
batch_name = unique(batchid)
# Create a list of sample IDs for each batch
sample_list <- lapply(batch_name, function(x) {
rownames(meta)[batchid == x]
})
# Create a list of meta data for each study based on sample_list
meta.list <- lapply(seq_along(batch_name), function(i) {
meta_filtered[sample_list[[i]], ]
})
devtools::load_all()
devtools::load_all()
library(MetaDICT)
metadict_res3 = MetaDICT(O,meta,covariates = c("Y2"), distance_matrix = dist_mat)
X3 = metadict_res3
pcoa.plot.discrete(X3,batchid,"Batch")
X3 = metadict_res3$count
pcoa.plot.discrete(X3,batchid,"Batch")
pcoa.plot.discrete(X3,meta$Y,"Batch")
pcoa.plot.discrete(X3,meta$Y,"Sample Covariate")
pcoa.plot.discrete(X3,meta$Y,"Sample Covariate Y", colorset = "Set2")
library(ggraph)
metadict_res4 = MetaDICT(O,meta,distance_matrix = dist_mat,customize_parameter = TRUE, alpha = 0.1, beta = 0.1)
plot(svd(D)$d)
plot(svd(D)$d, ylab = "Singular Value")
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 5)
D_filter = D[,1:50]
taxa_c = community_detection(D_filter, max_k = 5)
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 5)
devtools::load_all()
library(MetaDICT)
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 5)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(taxa_cluster)),size = 0.5) +
theme_bw()+
xlab("")+
ylab("")
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 10)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(taxa_cluster)),size = 0.5) +
theme_bw()+
xlab("")+
ylab("")
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 10)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_edge_fan(alpha = 0.05, show.legend = FALSE) +
geom_node_point(aes(color = taxa_cluster),
size = 2) +  # slightly larger nodes
labs(
title = title,
x = NULL,
y = NULL
) +
scale_color_brewer(palette = colorset) +
guides(color = "none", shape = guide_legend(title = "Truth")) +
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14),
legend.title = element_text(size = 14),  # Increase legend title size
legend.text  = element_text(size = 12),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 10)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_edge_fan(alpha = 0.05, show.legend = FALSE) +
geom_node_point(aes(color = taxa_cluster),
size = 2) +  # slightly larger nodes
labs(
title = title,
x = NULL,
y = NULL
) +
scale_color_brewer(palette = "Set1") +
guides(color = "none", shape = guide_legend(title = "Truth")) +
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14),
legend.title = element_text(size = 14),  # Increase legend title size
legend.text  = element_text(size = 12),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 10)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_edge_fan(alpha = 0.05, show.legend = FALSE) +
geom_node_point(aes(color = as.factor(taxa_cluster)),
size = 2) +  # slightly larger nodes
labs(
title = title,
x = NULL,
y = NULL
) +
scale_color_brewer(palette = "Set1") +
guides(color = "none", shape = guide_legend(title = "Truth")) +
theme_bw() +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 14),
legend.title = element_text(size = 14),  # Increase legend title size
legend.text  = element_text(size = 12),
axis.text = element_blank(),
axis.ticks = element_blank(),
panel.grid = element_blank(),
legend.position = "right"
)
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 5)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(taxa_cluster)),size = 0.5) +
theme_bw()+
xlab("")+
ylab("")
D_filter = D[,1:10]
taxa_c = community_detection(D_filter, max_k = 5)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(taxa_cluster)), size = 2) +  # Increase size for better visibility
scale_color_brewer(palette = "Set1", name = "Taxa Cluster") +  # Set legend title
theme_bw() +
xlab("") +
ylab("") +
theme(
legend.position = "right",  # Ensure the legend appears
legend.title = element_text(size = 12, face = "bold"),  # Format legend title
legend.text = element_text(size = 10)  # Format legend text
)
plot(diag(D%*%t(D)))
plot(diag(t(D)%*%(D)))
D = metadict_res4$D
plot(diag(t(D)%*%(D)))
D_filter = D[,1:20]
taxa_c = community_detection(D_filter, max_k = 5)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(taxa_cluster)), size = 2) +
scale_color_brewer(palette = "Set1", name = "Taxa Cluster") +
theme_bw() +
xlab("") +
ylab("") +
theme(
legend.position = "right",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
D_filter = D[,1:20]
taxa_c = community_detection(D_filter, max_k = 5)
taxa_cluster = taxa_c$cluster
taxa_graph = taxa_c$graph
ggraph(taxa_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(taxa_cluster)), size = 2) +
scale_color_brewer(palette = "Set1", name = "Taxa Cluster") +
theme_bw() +
xlab("") +
ylab("") +
theme(
legend.position = "right",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10)
)
R = do.call(cbind,R_list)
sample_c = community_detection(t(R), max_k = 50)
sample_cluster = sample_c$cluster
sample_graph = sample_c$graph
ggraph(sample_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(sample_cluster)),size = 0.5) +
theme_bw()+
xlab("")+
ylab("")
ggraph(sample_graph, layout = "stress") +
geom_node_point(aes(color = as.factor(meta$Y)),size = 0.5) +
theme_bw()+
xlab("")+
ylab("")
pcoa.plot.continuous(O,meta$Y,"Sample")
pcoa.plot.discrete(O,meta$Y,"Sample")
getwd()
cd ..
setwd("../")
devtools::document()
devtools::install()
library(MetaDICT)
data("exampleData")
batchid = meta$batch
pcoa.plot.discrete(O,batchid,"Batch")
library(MetaDICT)
data("exampleData")
data("exampleData")
data("exampleData")
data("exampleData")
remove.packages("MetaDICT")
devtools::load_all()
