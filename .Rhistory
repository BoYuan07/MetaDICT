getwd()
devtools::install()
knitr::opts_chunk$set(message = FALSE, warning = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(DT)
library(MetaDICT)
data("exampleData")
batchid = meta$batch
pcoa.plot.discrete(O,batchid,"Batch")
Y = meta$Y
pcoa.plot.discrete(O,Y,"Sample","Set2")
Y = meta$Y
pcoa.plot.discrete(O,Y,"Sample", colorset = "Set2")
ls
getwd()
usethis::use_vignette("my-vignette")
devtools::build_vignettes()
devtools::document()
remove.packages("MetaDICT")
devtools::install(build_vignettes = TRUE)
browseVignettes("MetaDICT")
devtools::build_vignettes()
devtools::document()
remove.packages("MetaDICT")
devtools::install_github("BoYuan07/MetaDICT", build_vignettes = TRUE)
browseVignettes("MetaDICT")
devtools::build_vignettes()
devtools::document()
devtools::build_vignettes()
knitr::opts_chunk$set(message = FALSE, warning = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(tidyverse)
library(DT)
options(DT.options = list(
initComplete = JS("function(settings, json) {",
"$(this.api().table().header()).css({'background-color':
'#000', 'color': '#fff'});","}")))
# load the package
library(MetaDICT)
# load data
data("exampleData")
# batch label
batchid = meta$batch
# PCoA plot
pcoa.plot.discrete(O,batchid,"Batch")
# main function of MetaDICT
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
X = metadict_res$count
D = metadict_res$D
R_list = metadict_res$R
w = metadict_res$w
meta_output = metadict_res$meta
# PCoA plot of batch variable
pcoa.plot.discrete(X,batchid,"Batch")
# PCoA plot of sample covariate
pcoa.plot.discrete(X,Y,"Sample",colorset = "Set2")
# sample covariate
Y = meta$Y
# PCoA plot
pcoa.plot.discrete(O,Y,"Sample", colorset = "Set2")
# PCoA plot of batch variable
pcoa.plot.discrete(X,batchid,"Batch")
# PCoA plot of sample covariate
pcoa.plot.discrete(X,Y,"Sample",colorset = "Set2")
# load the data
data("exampleData_transfer")
# add new dataset to previous result
new_data_res = metadict_add_new_data(new_data, new_meta, metadict_res)
# corrected count
new_count = new_data_res$count
# integrate count tables
all_count_raw = cbind(O,new_data)
all_count_corrected = cbind(X,new_count)
all_meta = rbind(meta,new_meta)
# PCoA plot of batch variable
pcoa.plot.discrete(all_count_raw,all_meta$batch,"Batch")
remove.packages("MetaDICT")
devtools::document()
devtools::document()
devtools::load_all()
knitr::opts_chunk$set(message = FALSE, warning = FALSE, comment = NA,
fig.width = 6.25, fig.height = 5)
library(tidyverse)
library(DT)
options(DT.options = list(
initComplete = JS("function(settings, json) {",
"$(this.api().table().header()).css({'background-color':
'#000', 'color': '#fff'});","}")))
# load the package
library(MetaDICT)
# load data
data("exampleData")
# batch label
batchid = meta$batch
# PCoA plot
pcoa.plot.discrete(O,batchid,"Batch")
# sample covariate
Y = meta$Y
# PCoA plot
pcoa.plot.discrete(O,Y,"Sample", colorset = "Set2")
# main function of MetaDICT
metadict_res = MetaDICT(O, meta, distance_matrix = dist_mat)
X = metadict_res$count
D = metadict_res$D
R_list = metadict_res$R
w = metadict_res$w
meta_output = metadict_res$meta
# load the data
data("exampleData_transfer")
# add new dataset to previous result
new_data_res = metadict_add_new_data(new_data, new_meta, metadict_res)
devtools::load_all()
library(MetaDICT)
# load the data
data("exampleData_transfer")
# add new dataset to previous result
new_data_res = metadict_add_new_data(new_data, new_meta, metadict_res)
meta_old <- integrated_result$meta
meta_old <- metadict_res$meta
r <- ncol(D)
covariates <- intersect(colnames(meta_old), colnames(newmeta))
meta_old <- metadict_res$meta
r <- ncol(D)
covariates <- intersect(colnames(meta_old), colnames(new_meta))
meta_filtered <- meta_old[, covariates, drop = FALSE]
devtools::load_all()
library(MetaDICT)
# load the data
data("exampleData_transfer")
# add new dataset to previous result
new_data_res = metadict_add_new_data(new_data, new_meta, metadict_res)
# load the data
data("exampleData_transfer")
# add new dataset to previous result
new_data_res = metadict_add_new_data(new_data, new_meta, metadict_res)
devtools::load_all()
library(MetaDICT)
# load the data
data("exampleData_transfer")
# add new dataset to previous result
new_data_res = metadict_add_new_data(new_data, new_meta, metadict_res)
# corrected count
new_count = new_data_res$count
# integrate count tables
all_count_raw = cbind(O,new_data)
all_count_corrected = cbind(X,new_count)
all_meta = rbind(meta,new_meta)
all_meta = rbind(meta[,-Y2],new_meta)
all_meta = rbind(meta[,-c("Y2")],new_meta)
all_meta = rbind(meta[,-2],new_meta)
# PCoA plot of batch variable
pcoa.plot.discrete(all_count_raw,all_meta$batch,"Batch")
# PCoA plot of sample covariate
pcoa.plot.discrete(all_count_raw,all_meta$Y,"Sample",colorset = "Set2")
# PCoA plot of batch variable
pcoa.plot.discrete(all_count_corrected,all_meta$batch,"Batch")
# PCoA plot of sample covariate
pcoa.plot.discrete(all_count_corrected,all_meta$Y,"Sample",colorset = "Set2")
all_count_raw = cbind(X,new_data)
# PCoA plot of batch variable
pcoa.plot.discrete(all_count_raw,all_meta$batch,"Batch")
# PCoA plot of sample covariate
pcoa.plot.discrete(all_count_raw,all_meta$Y,"Sample",colorset = "Set2")
covariates <- intersect(colnames(meta), colnames(new_meta))
all_meta = rbind(meta[,covariates, drop = FALSE],new_meta[,covariates, drop = FALSE])
devtools::build_vignettes()
devtools::document()
setwd(../)
setwd("../")
usethis::use_test("singular_val.R")
usethis::use_test("MetaDICT_transfer.R")
usethis::use_test("Supporting_function.R")
