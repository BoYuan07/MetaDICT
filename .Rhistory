use_mit_license()
usethis::use_mit_license()
library(usethis0)
library(usethis)
use_testthat(3)
use_test("MetaDICT")
devtools::load_all()
devtools::load_all()
test_file("tests/testthat/test-MetaDICT.R")
use_r("exampleData")
devtools::load_all()
devtools::test()
data(exampleData)
devtools::load_all()
devtools::test()
load("./data/exampleData.rds")
devtools::load_all("../MetaDICT/")
data(exampleData)
devtools::document()
devtools::use_data("data/exampleData.rds")
devtools::use_data(x)
devtools::document()
devtools::use_data("data/exampleData.rds")
devtools::load_all("../MetaDICT/")
devtools::test()
exampleData
data(exampleData)
library(MetaDICT)
data(exampleData)
usethis::use_data("./data/exampleData.rds")
usethis::use_data("../exampleData.rds")
devtools::document()
usethis::use_data("./data/exampleData.rds")
devtools::document()
devtools::load_all()
devtools::test()
data(exampleData)
library(ecodist)
library(ggplot2)
library(vegan)
library(ConQuR)
library(doParallel)
library(MMUPHin)
library(bayesm)
library(ggpubr)
source("./function.R")
# load order level data
count = read.csv("../data/count_order.csv")
count = count[,-1]
dist = read.csv("../data/dist_order.csv")
dist = as.matrix(dist[,-1])
# PCoA plot
permanova_r2 <- function(distP, Y, method = "bray") {
df.Y = as.data.frame(Y)
Re = adonis2(distP~Y, data = df.Y)
return(Re$R2[1])
}
## discrete
mds.plot = function(A,gl,main,colorset = "Set1",sample = "Study"){
dist_matrix = bcdist(t(A))
mds.stuff = cmdscale(dist_matrix, eig=T, x.ret=T)
mds.var.per = round(mds.stuff$eig/sum(mds.stuff$eig)*100,1)
mds.values = mds.stuff$points
mds.data = data.frame( X=mds.values[,1],
Y=mds.values[,2],
Sample = gl)
r2 = permanova_r2(dist_matrix,gl)
ggplot(data=mds.data, aes(x=X, y=Y,color=Sample))+
geom_point(size=0.2)+
xlab(paste("PCoA1 -", mds.var.per[1], '%', sep=""))+
ylab(paste("PCoA2 -", mds.var.per[2], '%', sep=""))+
labs(title = main,
subtitle = paste("R2 =",round(r2, digits = 2)))+
theme_bw()+
scale_color_brewer(palette=colorset)+
theme(legend.key.height=unit(0.5,"cm"))+
guides(color=guide_legend(title=sample))
}
## continuous
library(viridis)
mds.plot.cont = function(A,gl,main){
dist_matrix = bcdist(t(A))
mds.stuff = cmdscale(dist_matrix, eig=T, x.ret=T)
mds.var.per = round(mds.stuff$eig/sum(mds.stuff$eig)*100,1)
mds.values = mds.stuff$points
mds.data = data.frame(X=mds.values[,1],
Y=mds.values[,2],
Signal = gl)
r2 = permanova_r2(dist_matrix,gl)
ggplot(data=mds.data, aes(x=X, y=Y,col=Signal))+
geom_point(size=0.2)+
scale_colour_gradientn(colors = viridis(10))+
xlab(paste("PCoA1 -", mds.var.per[1], '%', sep=""))+
ylab(paste("PCoA2 -", mds.var.per[2], '%', sep=""))+
labs(title = main,
subtitle = paste("R2 =",round(r2, digits = 2)))+
theme_bw()
}
init_dataset = function(m,n,count,dist,k,neighbor = 5, sigma = 1, ez = 10){
d = nrow(count) # taxa number
O_list = list() # observed abundance
X_list = list() # absolute abundance
w_list = matrix(0,m,d) # measurement efficiency
meta.list = list()
meta.list1 = list()
prevalence = rowSums(count!=0)
d1 = sample(1:d,40)
# A: taxa adjacency matrix
A = matrix(0,d,d)
for(i in 1:d){
idx = order(dist[i,],decreasing = F)[2:(neighbor+1)]
A[i,idx] = exp(-dist[i,idx]/sigma)
A[idx,i] = exp(-dist[i,idx]/sigma)
}
D1 = diag(rowSums(A))
L = D1-A # Laplacian matrix of taxa neighborhood matrix
svd_res = svd(L)
U = svd_res$u
U = U[,(ncol(U)-k+1):(ncol(U))] # Last k eigenvectors are used in construction of measurement efficiency
for(i in 1:m){
idx1 = sample(ncol(count),n)
X0 = as.matrix(count[,idx1])
X = sapply(1:n,function(j)rdirichlet(X0[,j]+0.1))
Y = sample(1:2,size=n,replace=TRUE,prob=c(1/2,1/2))
X[d1,which(Y==1)] = (X[d1,which(Y==1)])*ez
X_lib = X%*%diag(sample(10000:15000,n,replace = T))
w_space = U
weight = 1-2*runif(k)
w = (w_space%*%as.matrix(weight))[,1]
w = (w-min(w)+0.05)
w = w/max(w)
# Y2: uninformative label
Y2 = as.factor(rbinom(n,1,1/2))
O_list[i] = list(floor(diag(w)%*%X_lib))
w_list[i,] = w
X_list[i] = list(X)
meta.list[[i]] = data.frame("Y" = sapply(Y,function(x)paste("Group",x)),"Y2" = Y2)
meta.list1[[i]] = data.frame("Y2" = Y2)
}
return(list(O_list, w_list, X_list, meta.list, meta.list1))
}
set.seed(3)
m = 2
n = 200
data = init_dataset(m,n,count,dist,k=10, ez=5)
O_list = data[[1]]
w_list_t = data[[2]]
X_list = data[[3]]
meta.list = data[[4]]
meta.list.sub = data[[5]]
meta = do.call("rbind",meta.list)
O = do.call(cbind,O_list)
meta$batch =as.factor(do.call(c,lapply(1:m, function(x)rep(paste("Batch",x),n))))
meta_sub = meta[,-1] # meta table without group variable Y
dataset_info = meta$batch
sample_info = meta$Y
save(O_list,dist,meta.list,"~/Desktop/exampleData.rda")
save(O_list,dist,meta.list,file = "~/Desktop/exampleData.rda")
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::document()
community_detection(O_list[[1]],max_k = 5)
pcoa.plot.discrete(O_list[[1]],meta.list[[1]]$Y,"try")
usethis::use_vignette("MetaDICT")
